unittest-xml-reporting
----------------------

unittest-xml-reporting is a Python unittest-based test runner that can export
test results to JUnit[1] like XML reports.

The usefulness of such a thing becomes clear when we consider the use of
Continous Integration servers (like Cruise Control[2] and Hudson[3]) to
control the build cycle of our applications.

Since most CI servers are able to parse those JUnit XML reports to know
whether a build fails (and display fancy graphics and statistics, of course),
it would be nice if such features could work for regular Python unittest
TestCases.


Installation
------------

Just drop the 'xmlrunner.py' file somewhere inside your PYTHONPATH and you are
ready to go.


Using unittest-xml-reporting
----------------------------

If you have already used the well known TextTestRunner that comes with the
built-in unittest module, then you probably know what to do.

Here goes a sample script similar to the one found on unittest
documentation[5]:

import random
import unittest
import xmlrunner

class TestSequenceFunctions(unittest.TestCase):
    
    def setUp(self):
        self.seq = range(10)
    
    def testshuffle(self):
        # make sure the shuffled sequence does not lose any elements
        random.shuffle(self.seq)
        self.seq.sort()
        self.assertEqual(self.seq, range(10))
    
    def testchoice(self):
        element = random.choice(self.seq)
        self.assert_(element in self.seq)
    
    def testsample(self):
        self.assertRaises(ValueError, random.sample, self.seq, 20)
        for element in random.sample(self.seq, 5):
            self.assert_(element in self.seq)

if __name__ == '__main__':
    # Uncomment the line below to use the default unittest Test Runner:
    # unittest.main()
    
    # Using XMLTestRunner to run the above test case:
    suite = unittest.TestLoader().loadTestsFromTestCase(TestSequenceFunctions)
    xmlrunner.XMLTestRunner(output_dir='build/test-reports').run(suite)


The 'examples' folder
---------------------

The main reason that made come up with this project in the first place was to
make it easier to manage the build cycle of my Django applications. Since I
already use Hudson to build my JavaEE applications, it would be nice to
leverage my current setup to handle my Django applications as well.

So in the 'examples' folder you can find the 'django_xmlrunner.py' script,
which shows how to plug unittest-xml-reporting to a Django project. The
Django documentation[4] shows how to configure your project to use a custom
test runner.

To fine tune this script, put one or more of the following settings in your
project's 'settings.py' file:

TEST_OUTPUT_VERBOSE (default: False)
    Besides the XML reports generated by the test runner, a bunch of useful
    information is printed to the sys.stderr stream, just like the
    TextTestRunner does. Use this setting to choose between a verbose and a
    non-verbose output.

TEST_OUTPUT_DESCRIPTIONS (default: False)
    If your test methods contains docstrings, you can display such docstrings
    instead of display the test name (ex: module.TestCase.test_method). In
    order to use this feature, you have to enable verbose output by setting
    TEST_OUTPUT_VERBOSE = True.

TEST_OUTPUT_DIR (default:'.')
    Tells the test runner where to put the XML reports. If the directory
    couldn't be found, the test runner will try to create it before
    generate the XML files.


Links
-----

[1] JUnit - http://junit.org/
[2] CruiseControl - http://cruisecontrol.sourceforge.net/
[3] Hudson - http://hudson.dev.java.net/
[4] http://docs.djangoproject.com/en/dev/ref/settings/#test-runner
[5] http://www.python.org/doc/2.5.2/lib/minimal-example.html


Authors
-------

Name:    Daniel Fernandes Martins <daniel.tritone@gmail.com>
Company: Destaquenet Technology Solutions <http://www.destaquenet.com/>


--EOF
